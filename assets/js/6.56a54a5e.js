(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{275:function(t,s,a){t.exports=a.p+"assets/img/q943_tree.d63ee0a8.png"},286:function(t,s,a){"use strict";a.r(s);var e=a(14),i=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_943-find-the-shortest-superstring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_943-find-the-shortest-superstring"}},[t._v("#")]),t._v(" 943. Find the Shortest Superstring")]),t._v(" "),s("blockquote",[s("p",[t._v("My LeetCode solutions on GitHub: "),s("a",{attrs:{href:"https://github.com/bsmsnd/LeetCode-CharlieChen",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/bsmsnd/LeetCode-CharlieChen"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"travelling-salesman-problem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#travelling-salesman-problem"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Travelling_salesman_problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travelling salesman problem"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("TSP Problems asks for the shortest path on a graph G with vertices V and weighted directed edges E (with cost weight W) such that all vertices are visited once and only once with no preference on the order of visiting all vertices.")]),t._v(" "),s("p",[t._v("With a dense graph(that is, almost any two vertices are directly connected), one can solve the question in the brute force way of complexity "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("O")]),s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("N")]),s("mo",{attrs:{stretchy:"false"}},[t._v("!")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(N!)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),s("span",{staticClass:"mclose"},[t._v("!")]),s("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(", of which the basic idea is to enumerate all possibilities in a form of a tree. For instance, for a graph of 5 nodes "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("V")]),s("mo",[t._v("=")]),s("mrow",[s("mn",[t._v("1")]),s("mo",{attrs:{separator:"true"}},[t._v(",")]),s("mn",[t._v("2")]),s("mo",{attrs:{separator:"true"}},[t._v(",")]),s("mn",[t._v("3")]),s("mo",{attrs:{separator:"true"}},[t._v(",")]),s("mn",[t._v("4")]),s("mo",{attrs:{separator:"true"}},[t._v(",")]),s("mn",[t._v("5")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("V = {1,2,3,4,5}")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.22222em"}},[t._v("V")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),s("span",{staticClass:"mrel"},[t._v("=")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8388800000000001em","vertical-align":"-0.19444em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord"},[t._v("1")]),s("span",{staticClass:"mpunct"},[t._v(",")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"mpunct"},[t._v(",")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),s("span",{staticClass:"mord"},[t._v("3")]),s("span",{staticClass:"mpunct"},[t._v(",")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),s("span",{staticClass:"mord"},[t._v("4")]),s("span",{staticClass:"mpunct"},[t._v(",")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),s("span",{staticClass:"mord"},[t._v("5")])])])])]),t._v(", suppose we are to start at node 1 and the graph is fully connected, then the tree is as follows:")]),t._v(" "),s("p",[s("img",{attrs:{src:a(275),alt:"tree"}})]),t._v(" "),s("p",[t._v("A common optimization for this problem is dynamic programming, i.e., memorization, if we can build this tree bottom-up. For instance, the path 4 --\x3e 5 exists in 1,2,3,4,5 and 1,3,2,4,5, and the cost to visit two nodes has no difference in these two paths, "),s("em",[t._v("given that vertex 4 has been arrived")]),t._v(". By doing memorization, the  complexity reduces to "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("n")]),s("mo",[t._v("+")]),s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("n")]),s("mo",{attrs:{separator:"true"}},[t._v(",")]),s("mn",[t._v("2")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")]),s("mo",[t._v("+")]),s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("n")]),s("mo",{attrs:{separator:"true"}},[t._v(",")]),s("mn",[t._v("3")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")]),s("mo",[t._v("+")]),s("mi",{attrs:{mathvariant:"normal"}},[t._v(".")]),s("mi",{attrs:{mathvariant:"normal"}},[t._v(".")]),s("mi",{attrs:{mathvariant:"normal"}},[t._v(".")]),s("mo",[t._v("+")]),s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("n")]),s("mo",{attrs:{separator:"true"}},[t._v(",")]),s("mi",[t._v("n")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")]),s("mo",[t._v("≈")]),s("msup",[s("mn",[t._v("2")]),s("mi",[t._v("n")])],1)],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n + (n,2) + (n,3) + ... + (n,n) \\approx 2^n")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.66666em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("n")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("+")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault"},[t._v("n")]),s("span",{staticClass:"mpunct"},[t._v(",")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"mclose"},[t._v(")")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("+")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault"},[t._v("n")]),s("span",{staticClass:"mpunct"},[t._v(",")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),s("span",{staticClass:"mord"},[t._v("3")]),s("span",{staticClass:"mclose"},[t._v(")")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("+")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.66666em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord"},[t._v(".")]),s("span",{staticClass:"mord"},[t._v(".")]),s("span",{staticClass:"mord"},[t._v(".")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("+")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault"},[t._v("n")]),s("span",{staticClass:"mpunct"},[t._v(",")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("n")]),s("span",{staticClass:"mclose"},[t._v(")")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),s("span",{staticClass:"mrel"},[t._v("≈")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.664392em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.664392em"}},[s("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mathdefault mtight"},[t._v("n")])])])])])])])])])])]),t._v(", where "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mo",{attrs:{stretchy:"false"}},[t._v("(")]),s("mi",[t._v("n")]),s("mo",{attrs:{separator:"true"}},[t._v(",")]),s("mi",[t._v("k")]),s("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("(n,k)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathdefault"},[t._v("n")]),s("span",{staticClass:"mpunct"},[t._v(",")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),s("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(" is the binomial polynomial, i.e., "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("n")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault"},[t._v("n")])])])]),t._v(" choose "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("k")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("k")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])])]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"apply-tsp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apply-tsp"}},[t._v("#")]),t._v(" Apply TSP")]),t._v(" "),s("p",[t._v("There are certain properties for this question that guatantees the correctness of TSP theory.")]),t._v(" "),s("ul",[s("li",[t._v("We may assume that no string in "),s("code",[t._v("A")]),t._v(" is substring of another string in "),s("code",[t._v("A")]),t._v(". This guarantees that no string can be skipped.")]),t._v(" "),s("li",[t._v("Find any smallest string that contains each string in A as a "),s("em",[t._v("substring")]),t._v(". This guarantees that we are not looking for sequences, which ends up a totally different question.")])]),t._v(" "),s("p",[t._v("To apply the TSP, we first find the common prefix/suffix of each pair of string. This can be seen as the "),s("em",[t._v("weight")]),t._v(" of that edge. Then we can start to build the tree bottom-up. We can start with 1 string, then we start to append certain string upfront and we always keep those strings (or the way to constrcut the string) that use a set of strings in "),s("code",[t._v("A")]),t._v(" and that uses a certain string at the front with the minimum length, i.e., "),s("code",[t._v("dp[STATE][t]")]),t._v(", and we update "),s("code",[t._v("dp[STATE2][t']")]),t._v(" such tha "),s("code",[t._v("t!=t'")]),t._v(" and "),s("code",[t._v("STATE")]),t._v(" is a subset of "),s("code",[t._v("STATE2")]),t._v(" with one string less than "),s("code",[t._v("STATE")]),t._v(", namely "),s("code",[t._v("t'")]),t._v(". Note that STATE is really a set of strings, but observe that "),s("code",[t._v("A")]),t._v(" has at most 12 strings, so we can use a 12-bit bitmap(or simply an integer) to represent the state: i-th bit = 1 indicates i-th string is in the set.")]),t._v(" "),s("h2",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),s("p",[t._v("https://en.wikipedia.org/wiki/Travelling_salesman_problem")])])}),[],!1,null,null,null);s.default=i.exports}}]);