(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{424:function(t,s,a){t.exports=a.p+"assets/img/q943_tree.d63ee0a8.png"},435:function(t,s,a){"use strict";a.r(s);var e=a(65),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_943-find-the-shortest-superstring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_943-find-the-shortest-superstring"}},[t._v("#")]),t._v(" 943. Find the Shortest Superstring")]),t._v(" "),e("blockquote",[e("p",[t._v("My LeetCode solutions on GitHub: "),e("a",{attrs:{href:"https://github.com/bsmsnd/LeetCode-CharlieChen",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/bsmsnd/LeetCode-CharlieChen"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"travelling-salesman-problem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#travelling-salesman-problem"}},[t._v("#")]),t._v(" "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Travelling_salesman_problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travelling salesman problem"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("TSP Problems asks for the shortest path on a graph G with vertices V and weighted directed edges E (with cost weight W) such that all vertices are visited once and only once with no preference on the order of visiting all vertices.")]),t._v(" "),e("p",[t._v("With a dense graph(that is, almost any two vertices are directly connected), one can solve the question in the brute force way of complexity "),e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",[e("semantics",[e("mrow",[e("mi",[t._v("O")]),e("mo",{attrs:{stretchy:"false"}},[t._v("(")]),e("mi",[t._v("N")]),e("mo",{attrs:{stretchy:"false"}},[t._v("!")]),e("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(N!)")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),e("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),e("span",{staticClass:"mopen"},[t._v("(")]),e("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),e("span",{staticClass:"mclose"},[t._v("!")]),e("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(", of which the basic idea is to enumerate all possibilities in a form of a tree. For instance, for a graph of 5 nodes "),e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",[e("semantics",[e("mrow",[e("mi",[t._v("V")]),e("mo",[t._v("=")]),e("mrow",[e("mn",[t._v("1")]),e("mo",{attrs:{separator:"true"}},[t._v(",")]),e("mn",[t._v("2")]),e("mo",{attrs:{separator:"true"}},[t._v(",")]),e("mn",[t._v("3")]),e("mo",{attrs:{separator:"true"}},[t._v(",")]),e("mn",[t._v("4")]),e("mo",{attrs:{separator:"true"}},[t._v(",")]),e("mn",[t._v("5")])],1)],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("V = {1,2,3,4,5}")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),e("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.22222em"}},[t._v("V")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),e("span",{staticClass:"mrel"},[t._v("=")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"0.8388800000000001em","vertical-align":"-0.19444em"}}),e("span",{staticClass:"mord"},[e("span",{staticClass:"mord"},[t._v("1")]),e("span",{staticClass:"mpunct"},[t._v(",")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),e("span",{staticClass:"mord"},[t._v("2")]),e("span",{staticClass:"mpunct"},[t._v(",")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),e("span",{staticClass:"mord"},[t._v("3")]),e("span",{staticClass:"mpunct"},[t._v(",")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),e("span",{staticClass:"mord"},[t._v("4")]),e("span",{staticClass:"mpunct"},[t._v(",")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),e("span",{staticClass:"mord"},[t._v("5")])])])])]),t._v(", suppose we are to start at node 1 and the graph is fully connected, then the tree is as follows:")]),t._v(" "),e("p",[e("img",{attrs:{src:a(424),alt:"tree"}})]),t._v(" "),e("p",[t._v("A common optimization for this problem is dynamic programming, i.e., memorization, if we can build this tree bottom-up. For instance, the path 4 --\x3e 5 exists in 1,2,3,4,5 and 1,3,2,4,5, and the cost to visit two nodes has no difference in these two paths, "),e("em",[t._v("given that vertex 4 has been arrived")]),t._v(". By doing memorization, the  complexity reduces to "),e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",[e("semantics",[e("mrow",[e("mi",[t._v("n")]),e("mo",[t._v("+")]),e("mo",{attrs:{stretchy:"false"}},[t._v("(")]),e("mi",[t._v("n")]),e("mo",{attrs:{separator:"true"}},[t._v(",")]),e("mn",[t._v("2")]),e("mo",{attrs:{stretchy:"false"}},[t._v(")")]),e("mo",[t._v("+")]),e("mo",{attrs:{stretchy:"false"}},[t._v("(")]),e("mi",[t._v("n")]),e("mo",{attrs:{separator:"true"}},[t._v(",")]),e("mn",[t._v("3")]),e("mo",{attrs:{stretchy:"false"}},[t._v(")")]),e("mo",[t._v("+")]),e("mi",{attrs:{mathvariant:"normal"}},[t._v(".")]),e("mi",{attrs:{mathvariant:"normal"}},[t._v(".")]),e("mi",{attrs:{mathvariant:"normal"}},[t._v(".")]),e("mo",[t._v("+")]),e("mo",{attrs:{stretchy:"false"}},[t._v("(")]),e("mi",[t._v("n")]),e("mo",{attrs:{separator:"true"}},[t._v(",")]),e("mi",[t._v("n")]),e("mo",{attrs:{stretchy:"false"}},[t._v(")")]),e("mo",[t._v("≈")]),e("msup",[e("mn",[t._v("2")]),e("mi",[t._v("n")])],1)],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n + (n,2) + (n,3) + ... + (n,n) \\approx 2^n")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"0.66666em","vertical-align":"-0.08333em"}}),e("span",{staticClass:"mord mathdefault"},[t._v("n")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),e("span",{staticClass:"mbin"},[t._v("+")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),e("span",{staticClass:"mopen"},[t._v("(")]),e("span",{staticClass:"mord mathdefault"},[t._v("n")]),e("span",{staticClass:"mpunct"},[t._v(",")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),e("span",{staticClass:"mord"},[t._v("2")]),e("span",{staticClass:"mclose"},[t._v(")")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),e("span",{staticClass:"mbin"},[t._v("+")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),e("span",{staticClass:"mopen"},[t._v("(")]),e("span",{staticClass:"mord mathdefault"},[t._v("n")]),e("span",{staticClass:"mpunct"},[t._v(",")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),e("span",{staticClass:"mord"},[t._v("3")]),e("span",{staticClass:"mclose"},[t._v(")")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),e("span",{staticClass:"mbin"},[t._v("+")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"0.66666em","vertical-align":"-0.08333em"}}),e("span",{staticClass:"mord"},[t._v(".")]),e("span",{staticClass:"mord"},[t._v(".")]),e("span",{staticClass:"mord"},[t._v(".")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),e("span",{staticClass:"mbin"},[t._v("+")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),e("span",{staticClass:"mopen"},[t._v("(")]),e("span",{staticClass:"mord mathdefault"},[t._v("n")]),e("span",{staticClass:"mpunct"},[t._v(",")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),e("span",{staticClass:"mord mathdefault"},[t._v("n")]),e("span",{staticClass:"mclose"},[t._v(")")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),e("span",{staticClass:"mrel"},[t._v("≈")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"0.664392em","vertical-align":"0em"}}),e("span",{staticClass:"mord"},[e("span",{staticClass:"mord"},[t._v("2")]),e("span",{staticClass:"msupsub"},[e("span",{staticClass:"vlist-t"},[e("span",{staticClass:"vlist-r"},[e("span",{staticClass:"vlist",staticStyle:{height:"0.664392em"}},[e("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[e("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),e("span",{staticClass:"sizing reset-size6 size3 mtight"},[e("span",{staticClass:"mord mathdefault mtight"},[t._v("n")])])])])])])])])])])]),t._v(", where "),e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",[e("semantics",[e("mrow",[e("mo",{attrs:{stretchy:"false"}},[t._v("(")]),e("mi",[t._v("n")]),e("mo",{attrs:{separator:"true"}},[t._v(",")]),e("mi",[t._v("k")]),e("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("(n,k)")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),e("span",{staticClass:"mopen"},[t._v("(")]),e("span",{staticClass:"mord mathdefault"},[t._v("n")]),e("span",{staticClass:"mpunct"},[t._v(",")]),e("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),e("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),e("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(" is the binomial polynomial, i.e., "),e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",[e("semantics",[e("mrow",[e("mi",[t._v("n")])],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),e("span",{staticClass:"mord mathdefault"},[t._v("n")])])])]),t._v(" choose "),e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",[e("semantics",[e("mrow",[e("mi",[t._v("k")])],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("k")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"base"},[e("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),e("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")])])])]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"apply-tsp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#apply-tsp"}},[t._v("#")]),t._v(" Apply TSP")]),t._v(" "),e("p",[t._v("There are certain properties for this question that guatantees the correctness of TSP theory.")]),t._v(" "),e("ul",[e("li",[t._v("We may assume that no string in "),e("code",[t._v("A")]),t._v(" is substring of another string in "),e("code",[t._v("A")]),t._v(". This guarantees that no string can be skipped.")]),t._v(" "),e("li",[t._v("Find any smallest string that contains each string in A as a "),e("em",[t._v("substring")]),t._v(". This guarantees that we are not looking for sequences, which ends up a totally different question.")])]),t._v(" "),e("p",[t._v("To apply the TSP, we first find the common prefix/suffix of each pair of string. This can be seen as the "),e("em",[t._v("weight")]),t._v(" of that edge. Then we can start to build the tree bottom-up. We can start with 1 string, then we start to append certain string upfront and we always keep those strings (or the way to constrcut the string) that use a set of strings in "),e("code",[t._v("A")]),t._v(" and that uses a certain string at the front with the minimum length, i.e., "),e("code",[t._v("dp[STATE][t]")]),t._v(", and we update "),e("code",[t._v("dp[STATE2][t']")]),t._v(" such tha "),e("code",[t._v("t!=t'")]),t._v(" and "),e("code",[t._v("STATE")]),t._v(" is a subset of "),e("code",[t._v("STATE2")]),t._v(" with one string less than "),e("code",[t._v("STATE")]),t._v(", namely "),e("code",[t._v("t'")]),t._v(". Note that STATE is really a set of strings, but observe that "),e("code",[t._v("A")]),t._v(" has at most 12 strings, so we can use a 12-bit bitmap(or simply an integer) to represent the state: i-th bit = 1 indicates i-th string is in the set.")]),t._v(" "),e("h2",{attrs:{id:"reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),e("p",[t._v("https://en.wikipedia.org/wiki/Travelling_salesman_problem")])])}),[],!1,null,null,null);s.default=i.exports}}]);